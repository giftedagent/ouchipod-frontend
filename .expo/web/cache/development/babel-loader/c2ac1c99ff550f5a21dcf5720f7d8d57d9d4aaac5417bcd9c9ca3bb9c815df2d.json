{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { SplashScreen, Stack } from 'expo-router';\nimport { useEffect } from 'react';\nimport useColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport { ErrorBoundary } from 'expo-router';\nexport var unstable_settings = {\n  initialRouteName: '(tabs)'\n};\nexport default function RootLayout() {\n  var _useFonts = useFonts(_objectSpread({\n      SpaceMono: require(\"../assets/fonts/SpaceMono-Regular.ttf\")\n    }, FontAwesome.font)),\n    _useFonts2 = _slicedToArray(_useFonts, 2),\n    loaded = _useFonts2[0],\n    error = _useFonts2[1];\n  useEffect(function () {\n    if (error) throw error;\n  }, [error]);\n  return _jsxs(_Fragment, {\n    children: [!loaded && _jsx(SplashScreen, {}), loaded && _jsx(RootLayoutNav, {})]\n  });\n}\nfunction RootLayoutNav() {\n  var colorScheme = useColorScheme();\n  return _jsx(_Fragment, {\n    children: _jsx(ThemeProvider, {\n      value: colorScheme === 'dark' ? DarkTheme : DefaultTheme,\n      children: _jsxs(Stack, {\n        children: [_jsx(Stack.Screen, {\n          name: \"(tabs)\",\n          options: {\n            headerShown: false\n          }\n        }), _jsx(Stack.Screen, {\n          name: \"modal\",\n          options: {\n            presentation: 'modal'\n          }\n        })]\n      })\n    })\n  });\n}","map":{"version":3,"names":["FontAwesome","DarkTheme","DefaultTheme","ThemeProvider","useFonts","SplashScreen","Stack","useEffect","useColorScheme","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","ErrorBoundary","unstable_settings","initialRouteName","RootLayout","_useFonts","_objectSpread","SpaceMono","require","font","_useFonts2","_slicedToArray","loaded","error","children","RootLayoutNav","colorScheme","value","Screen","name","options","headerShown","presentation"],"sources":["/Users/motono/Desktop/work_hack/OUCHI_Pod/app/_layout.tsx"],"sourcesContent":["import FontAwesome from '@expo/vector-icons/FontAwesome';\nimport { DarkTheme, DefaultTheme, ThemeProvider } from '@react-navigation/native';\nimport { useFonts } from 'expo-font';\nimport { SplashScreen, Stack } from 'expo-router';\nimport { useEffect } from 'react';\nimport { useColorScheme } from 'react-native';\n\nexport {\n  // Catch any errors thrown by the Layout component.\n  ErrorBoundary,\n} from 'expo-router';\n\nexport const unstable_settings = {\n  // Ensure that reloading on `/modal` keeps a back button present.\n  initialRouteName: '(tabs)',\n};\n\nexport default function RootLayout() {\n  const [loaded, error] = useFonts({\n    SpaceMono: require('../assets/fonts/SpaceMono-Regular.ttf'),\n    ...FontAwesome.font,\n  });\n\n  // Expo Router uses Error Boundaries to catch errors in the navigation tree.\n  useEffect(() => {\n    if (error) throw error;\n  }, [error]);\n\n  return (\n    <>\n      {/* Keep the splash screen open until the assets have loaded. In the future, we should just support async font loading with a native version of font-display. */}\n      {!loaded && <SplashScreen />}\n      {loaded && <RootLayoutNav />}\n    </>\n  );\n}\n\nfunction RootLayoutNav() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <>\n      <ThemeProvider value={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n        <Stack>\n          <Stack.Screen name=\"(tabs)\" options={{ headerShown: false }} />\n          <Stack.Screen name=\"modal\" options={{ presentation: 'modal' }} />\n        </Stack>\n      </ThemeProvider>\n    </>\n  );\n}\n"],"mappings":";;;;AAAA,OAAOA,WAAW,MAAM,gCAAgC;AACxD,SAASC,SAAS,EAAEC,YAAY,EAAEC,aAAa,QAAQ,0BAA0B;AACjF,SAASC,QAAQ,QAAQ,WAAW;AACpC,SAASC,YAAY,EAAEC,KAAK,QAAQ,aAAa;AACjD,SAASC,SAAS,QAAQ,OAAO;AAAC,OAAAC,cAAA;AAAA,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAGlC,SAEEC,aAAa,QACR,aAAa;AAEpB,OAAO,IAAMC,iBAAiB,GAAG;EAE/BC,gBAAgB,EAAE;AACpB,CAAC;AAED,eAAe,SAASC,UAAUA,CAAA,EAAG;EACnC,IAAAC,SAAA,GAAwBf,QAAQ,CAAAgB,aAAA;MAC9BC,SAAS,EAAEC,OAAO;IAAyC,GACxDtB,WAAW,CAACuB,IAAI,EACnB;IAAAC,UAAA,GAAAC,cAAA,CAAAN,SAAA;IAHKO,MAAM,GAAAF,UAAA;IAAEG,KAAK,GAAAH,UAAA;EAMpBjB,SAAS,CAAC,YAAM;IACd,IAAIoB,KAAK,EAAE,MAAMA,KAAK;EACxB,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;EAEX,OACEb,KAAA,CAAAF,SAAA;IAAAgB,QAAA,GAEG,CAACF,MAAM,IAAIhB,IAAA,CAACL,YAAY,KAAG,EAC3BqB,MAAM,IAAIhB,IAAA,CAACmB,aAAa,KAAG;EAAA,EAC3B;AAEP;AAEA,SAASA,aAAaA,CAAA,EAAG;EACvB,IAAMC,WAAW,GAAGtB,cAAc,EAAE;EAEpC,OACEE,IAAA,CAAAE,SAAA;IAAAgB,QAAA,EACElB,IAAA,CAACP,aAAa;MAAC4B,KAAK,EAAED,WAAW,KAAK,MAAM,GAAG7B,SAAS,GAAGC,YAAa;MAAA0B,QAAA,EACtEd,KAAA,CAACR,KAAK;QAAAsB,QAAA,GACJlB,IAAA,CAACJ,KAAK,CAAC0B,MAAM;UAACC,IAAI,EAAC,QAAQ;UAACC,OAAO,EAAE;YAAEC,WAAW,EAAE;UAAM;QAAE,EAAG,EAC/DzB,IAAA,CAACJ,KAAK,CAAC0B,MAAM;UAACC,IAAI,EAAC,OAAO;UAACC,OAAO,EAAE;YAAEE,YAAY,EAAE;UAAQ;QAAE,EAAG;MAAA;IAC3D;EACM,EACf;AAEP"},"metadata":{},"sourceType":"module","externalDependencies":[]}